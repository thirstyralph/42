/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   callbacks.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/01 10:25:04 by ranavarr          #+#    #+#             */
/*   Updated: 2025/09/01 17:29:10 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"

//	Necessary callbacks
//	- Scroll
//	- Close window
//		free everything (if needed) and exit
//		for Esc too
//	- Resize ==I'll skip it for now==

void	my_scroll(double xdelta, double ydelta, void *param)
{
	t_app	*app;

	(void)xdelta;
	app = (t_app *)param;
	if (ydelta > 0)
		app->conf->zoom += 0.10;
	else if (ydelta < 0)
		app->conf->zoom -= 0.10;
	draw_frame(app);
	printf("zoom = %f\n", app->conf->zoom);
}

/* let's just not do this for now
void	my_resize(int32_t width, int32_t height, void *param)
{
	t_app	*app;

	app = (t_app *)param;
	app->conf->x_limit = width;
	app->conf->y_limit = height;
	draw_frame(&app->img, app->mlx, *app->conf);
	printf("w = %d, h = %d\n", width, height);
}
*/

void	my_close(void *param)
{
	t_app	*app;

	app = (t_app *)param;
	mlx_delete_image(app->mlx, app->img);
	printf("image deleted in close\n");
	mlx_terminate(app->mlx);
	printf("hay que cerrar, que ya es tarde\n");
	exit(0);
}

void	key_hook(mlx_key_data_t keydata, void *param)
{
	if (keydata.key == MLX_KEY_ESCAPE && keydata.action == MLX_PRESS)
	{
		printf("BOMBOCLAAAT\n");
		my_close(param);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   color.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/01 10:59:34 by ranavarr          #+#    #+#             */
/*   Updated: 2025/09/01 17:35:15 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"
/*
int	color(int iter, int max)
{
	unsigned char	r;
	unsigned char	g;
	unsigned char	b;
	unsigned char	a;

	if (iter == max)
		return (0x000000FF);
	else
		return (0xFF00FFFF);
	a = 0xFF;
	r = (unsigned char)((255 * iter) / max);
	g = (unsigned char)((255 * iter) / max);
	b = (unsigned char)((255 * iter) / max);
	return (r << 24 | g << 16 | b << 8 | a);
}
*/

int color(int iter, int max)
{
    if (iter == max)
        return 0x000000FF;  // negro
    else
        return 0xFF0000FF - (iter * 0x00010000 / max); // De rojo a negro
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   complex_ops.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/31 18:30:50 by ranavarr          #+#    #+#             */
/*   Updated: 2025/08/31 18:31:14 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"

//adition
t_complex	add(t_complex a, t_complex b)
{
	t_complex	r;

	r.re = a.re + b.re;
	r.im = a.im + a.im;
	return (r);
}

//multiplication
t_complex	mul(t_complex a, t_complex b)
{
	t_complex	r;

	r.re = a.re * b.re - (a.im * b.im);
	r.im = a.re * b.im + (a.im * b.re);
	return (r);
}

//modulus (magnitude)
double	mod_squared(t_complex z)
{
	return (z.re * z.re + z.im * z.im);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   draw_frame.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/01 17:05:33 by ranavarr          #+#    #+#             */
/*   Updated: 2025/09/01 17:31:58 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"

void	next_pixel(int *x, int *y, t_conf config)
{
	if (*x == config.x_limit -1)
	{
		*x = 0;
		(*y)++;
	}
	else
		(*x)++;
}

	//declara x e y == 0
	//toma una imagen y la modifica? (MLX_images)
	//que es mlt_t y que es mlx_image?
	//para cada valor de x e y, calcular su posicion en el plano complejo
	//no necesito calcular offset porque put_pixel se encarga
	//aplicar la funcion que corresponda (La toma con un puntero de funcion?)
	//siguiente x e y
	//y ya esta??
void	draw_frame(t_app *app)
{
	int	x;
	int	y;
	int	it;

	y = 0;
	x = 0;
	mlx_delete_image(app->mlx, app->img);
	app->img = mlx_new_image(app->mlx, app->conf->x_limit, app->conf->y_limit);
	while (y < app->conf->y_limit)
	{
		it = mandelbrot(pixel_to_complex(x, y, app->conf->zoom), app->conf->max);
		printf("x=%d,y=%d", x, y);
		mlx_put_pixel(app->img, x, y, color(it, app->conf->max));
		next_pixel(&x, &y, *app->conf);
	}
	mlx_image_to_window(app->mlx, app->img, 0, 0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   hooks.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/01 10:05:58 by ranavarr          #+#    #+#             */
/*   Updated: 2025/09/01 10:06:03 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/31 18:41:34 by ranavarr          #+#    #+#             */
/*   Updated: 2025/09/01 16:56:13 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"
#include <stdio.h>

static void	ft_error(void)
{
	exit(EXIT_FAILURE);
}

//	mlx_init
//	mlx_new_image, create new img
//	maybe I have to create a structure with EVERYTHING, that is:
//		- MLX_T struct
//		- image
//		- pointer to the fractal function to use
//	set up hooks
//		[ ] scroll hook
//		[ ] close hook
//		[ ] resize hook --Maybe it'd be better to ignore this one for now--
//		- only one hook function? or one per action?		
//		- how to make sure it renders once per action?
//		- how to make it render the correct fractal each time?
//		  maybe a wrapper struct with a pointer function?
//		- I have to make callbacks file for callback funcitons
//
//	start loop
//	terminate
int	main(int argc, char *argv[])
{
	mlx_t		*mlx;
	mlx_image_t	*img;
	t_conf		conf;
	t_app		app;

	conf = parse(argc, argv);
	defaults(&conf);
	mlx = mlx_init(conf.x_limit, conf.y_limit, "fract-ol", true);
	if (!mlx)
		ft_error();
	if (conf.set == 1)
		conf.set = 2;
	app = unify(mlx, &img, &conf);
	mlx_key_hook(mlx, key_hook, &app);
	mlx_close_hook(mlx, my_close, &app);
	mlx_scroll_hook(mlx, my_scroll, &app);
	draw_frame(&app);
	mlx_loop(mlx);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   mandelbrot.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/31 18:33:01 by ranavarr          #+#    #+#             */
/*   Updated: 2025/09/01 17:17:00 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"

/*
	zn = zn-1^2 + c
	mandelbrot:
		Calculates the number of iterations of the equation for it to grow
		out of bounds.
	takes:
		complex c: Value of C
		int limit: maximum number of operations to perform.
	returns:
		int: Number of iterations 
*/
int	mandelbrot(t_complex c, int limit)
{
	t_complex	tmp;
	int			i;

	i = 0;
	tmp.re = 0;
	tmp.im = 0;
	while (mod_squared(tmp) <= 4 && i < limit)
	{
		tmp = add(mul(tmp, tmp), c);
		i++;
	}
	return (i);
}

/* This will probably get deleted
void	mandelbrot_loop(mlx *data, t_conf config)
{
	int			window_width;
	int			window_height;
	double		zoom;
	t_complex	center;

	x = 0;
	y = 0;
	zoom = 1;
	center.re = 0;
	center.im = 0;
	//
	while (
}
*/
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/31 20:34:48 by ranavarr          #+#    #+#             */
/*   Updated: 2025/09/01 10:41:28 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"

void	use_msg(void)
{
	(void)!write(1, "use\n", 4);
	(void)!write(1, "Sets: 1(Mandelbrot), 2(Julia)\n", 30);
}

t_conf	parse(int argc, char *argv[])
{
	//julia set parameters not implemented!!! FIX
	//shitty parse, REWRITE
	t_conf	r;

	if (argc == 2)
	{
		if (argv[1][0] == '1')
			r.set = 1;
		else if (argv[1][0] == '2')
			r.set = 2;
		else
		{
			use_msg();
			exit(0);
		}
	}
	else
	{
		use_msg();
		exit(0);
	}
	return (r);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   unify.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/01 12:32:08 by ranavarr          #+#    #+#             */
/*   Updated: 2025/09/01 13:15:53 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"

t_app	unify(mlx_t *mlx, mlx_image_t **img, t_conf *conf)
{
	t_app	r;

	r.mlx = mlx;
	r.img = *img;
	r.conf = conf;
	return (r);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ranavarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/31 19:29:10 by ranavarr          #+#    #+#             */
/*   Updated: 2025/09/01 17:37:07 by ranavarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fractol.h"
#include <stdio.h>

/* I no longer need this =DELETE
uint32_t	offset(int x, int y, mlx_t data)
{
	return ((y * data.width) + (x * 4));
}
*/

void	defaults(t_conf *config)
{
	config->z = 1;
	config->zoom = 1;
	config->center.im = 0;
	config->center.re = 0;
	config->x_limit = WIDTH;
	config->y_limit = HEIGHT;
	config->max = 1000;
}

t_complex	pixel_to_complex(int x, int y, double zoom)
{
	t_complex	r;

	r.im = (double)y * zoom;
	r.re = (double)x * zoom;
	return (r);
}
